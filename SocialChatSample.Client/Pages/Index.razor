@page "/"
@inject NavigationManager navigationManager
@using SocialChatSample.Client.Data

<div class="top-row px-4">
    @if (chatting)
    {
        <p>You are connected as <b>@username</b></p>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnet</button>
    }


</div>

<div class="content px-4">
    <h1>Social Chat</h1>
    @if (!chatting)
    {
        <h2>Chat</h2>

        <p>Enter your name to start chatting</p>

        <input type="text" maxlength="32" @bind="@username" />
        <button @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span></button>

        @if(message != null)
        {
            <div class="invalid-feedback">@message</div>
            <small id="emailHelp" class="form-text text-muted">@message</small>
        }

    }

    @if (chatting)
    {
        <div id="scrollbox">
            @foreach(var item in messages)
            {
            <div class="@item.CSS">
                <div class="user">@item.Username</div>
                <div class="user">@item.Body</div>
            </div>
            }
            <hr />
            <textarea class="input-lg" placeholder="Type Comments" @bind="newMessage"></textarea>
            <button class="btn" @onclick="@SendAsync">Send</button>


        </div>
    }



</div>





@code{
    bool chatting = false;
    string username = null;
    ChatClient client = null;
    string message = null;
    string newMessage = null;
    List<Message> messages = new List<Message>();

    async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Please enter a name";
            return;
        }

        try
        {
            messages.Clear();
            client = new ChatClient(username, navigationManager);
            client.MessageReceived += MessageReceived;
            Console.WriteLine("Index:chat starting...");
            await client.StarAsync();
            Console.WriteLine("Index: chat starting?");
            chatting = true;

        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);

        }
    }

    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username} : {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username,username, StringComparison.CurrentCultureIgnoreCase);
        }
        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if(chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
            await client.SendAsync(newMessage);
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }
        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}

